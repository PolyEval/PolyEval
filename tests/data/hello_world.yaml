cpp: |
  string p_e_entry() {
      return "Hello, World!";
  }
csharp: |
  static string p_e_entry() {
      return "Hello, World!";
  }
go: |
  func p_e_entry() string {
      return "Hello, World!"
  }
java: |
  static String p_e_entry() {
      return "Hello, World!";
  }
javascript: |
  function p_e_entry() {
      return "Hello, World!";
  }
php: |
  function p_e_entry() {
      return "Hello, World!";
  }
python: |
  def p_e_entry() -> str:
      return "Hello, World!"
ruby: |
  def p_e_entry()
      "Hello, World!"
  end

coffeescript: |
  p_e_entry = () ->
      "Hello, World!"
dart: |
  String p_e_entry() {
      return "Hello, World!";
  }
elixir: |
  def p_e_entry() do
      "Hello, World!"
  end
groovy: |
  def p_e_entry() {
      return "Hello, World!"
  }
kotlin: |
  fun p_e_entry(): String {
      return "Hello, World!"
  }
objectivec: |
  + (NSString *)p_e_entry {
      return @"Hello, World!";
  }
perl: |
  sub p_e_entry () {
      return "Hello, World!";
  }
rust: |
  fn p_e_entry() -> String {
      "Hello, World!".to_string()
  }
scala: |
  def p_e_entry(): String = {
      "Hello, World!"
  }
swift: |
  func p_e_entry() -> String {
      return "Hello, World!"
  }
typescript: |
  function p_e_entry(): String {
      return "Hello, World!";
  }

clojure: |
  (defn p_e_entry []
      "Hello, World!")
crystal: |
  def p_e_entry() : String
      "Hello, World!"
  end
d: |
  string p_e_entry() {
      return "Hello, World!";
  }
elm: |
  p_e_entry : String
  p_e_entry = 
      "Hello, World!"
erlang: |
  p_e_entry() ->
      "Hello, World!".
fsharp: |
  let p_e_entry : string =
      "Hello, World!"
hack: |
  function p_e_entry(): string {
      return "Hello, World!";
  }
haskell: |
  p_e_entry :: String
  p_e_entry =
      "Hello, World!"
julia: |
  function p_e_entry()::String
      return "Hello, World!"
  end
lua: |
  function p_e_entry()
      return "Hello, World!"
  end
nim: |
  proc p_e_entry(): string =
      "Hello, World!"
ocaml: |
  let p_e_entry : string =
      "Hello, World!"
purescript: |
  p_e_entry :: String
  p_e_entry = 
      "Hello, World!"
racket: |
  (define (p_e_entry)
      "Hello, World!")
rescript: |
  let p_e_entry = (): string =>
      "Hello, World!";